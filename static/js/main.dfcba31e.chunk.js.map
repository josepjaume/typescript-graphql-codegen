{"version":3,"sources":["graphql.ts","App.tsx","index.tsx"],"names":["CacheControlScope","defaultOptions","GetCharactersDocument","gql","App","useState","search","setSearch","searchRef","useRef","baseOptions","options","Apollo","useGetCharactersQuery","variables","data","loading","maxW","marginY","marginBottom","onSubmit","event","current","value","preventDefault","pointerEvents","children","color","ref","placeholder","minChildWidth","spacing","characters","results","map","character","align","flexDirection","trigger","image","src","alt","name","episode","length","species","gender","origin","dimension","type","marginTop","client","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"qHAmBYA,E,mHAZNC,G,OAAkB,K,SAYZD,K,kBAAAA,E,iBAAAA,M,KAiML,IAAME,EAAwBC,YAAH,2V,WC/GnBC,MA9Ef,WAAgB,IAAD,MACaC,mBAAS,IADtB,mBACRC,EADQ,KACAC,EADA,KAGTC,EAAYC,iBAAyB,MAH5B,EDqOR,SAA+BC,GAC9B,IAAMC,EAAO,2BAAOV,GAAmBS,GACvC,OAAOE,IAAiEV,EAAuBS,GClO7EE,CAAsB,CAC5CC,UAAW,CACTR,YAFES,EALO,EAKPA,KAAMC,EALC,EAKDA,QAMZ,OACE,eAAC,IAAD,CAAWC,KAAK,eAAeC,QAAQ,IAAvC,UACE,cAAC,IAAD,CAAKC,aAAc,EAAnB,SACE,sBACEC,SAAU,SAACC,GAAW,IAAD,EACnBd,GAAmB,OAATC,QAAS,IAATA,GAAA,UAAAA,EAAWc,eAAX,eAAoBC,QAAS,IACvCF,EAAMG,kBAHV,SAME,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,cAAc,OACdC,SAAU,cAAC,IAAD,CAAYC,MAAM,eAE9B,cAAC,IAAD,CAAOC,IAAKpB,EAAWqB,YAAY,qBAKxCb,EACC,cAAC,IAAD,IAEA,cAAC,IAAD,CAAYc,cAAc,QAAQC,QAAS,EAA3C,gBACGhB,QADH,IACGA,GADH,UACGA,EAAMiB,kBADT,iBACG,EAAkBC,eADrB,aACG,EAA2BC,KAAI,SAACC,GAAD,eAC9B,eAAC,IAAD,CAAMC,MAAM,SAASC,cAAc,SAAnC,UACE,eAAC,IAAD,CAASC,QAAQ,QAAjB,UACE,cAAC,IAAD,WACY,OAATH,QAAS,IAATA,OAAA,EAAAA,EAAWI,QACV,qBACEC,IAAG,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAWI,MAChBE,IAAKN,EAAUO,MAAQ,iCAI7B,eAAC,IAAD,WACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,wCAASP,QAAT,IAASA,OAAT,EAASA,EAAWO,OADtB,IACsC,IADtC,OAEGP,QAFH,IAEGA,OAFH,EAEGA,EAAWQ,QAAQC,OAFtB,eAIA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,kBACGT,QADH,IACGA,OADH,EACGA,EAAWU,QADd,YACyBV,QADzB,IACyBA,OADzB,EACyBA,EAAWW,OADpC,OAGA,eAAC,IAAD,kBACGX,QADH,IACGA,GADH,UACGA,EAAWY,cADd,aACG,EAAmBL,KADtB,YAEGP,QAFH,IAEGA,GAFH,UAEGA,EAAWY,cAFd,aAEG,EAAmBC,UAFtB,QAIU,OAATb,QAAS,IAATA,OAAA,EAAAA,EAAWc,OACV,cAAC,IAAD,iBAAWd,QAAX,IAAWA,OAAX,EAAWA,EAAWc,kBAMhC,cAAC,IAAD,CAAKC,UAAW,EAAhB,SACE,wCAASf,QAAT,IAASA,OAAT,EAASA,EAAWO,qB,mCCrF9BS,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,IAAK,wCAGPC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,EAAD,UAINS,SAASC,eAAe,W","file":"static/js/main.dfcba31e.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport enum CacheControlScope {\n  Private = 'PRIVATE',\n  Public = 'PUBLIC'\n}\n\nexport type Character = {\n  __typename?: 'Character';\n  /** Time at which the character was created in the database. */\n  created?: Maybe<Scalars['String']>;\n  /** Episodes in which this character appeared. */\n  episode: Array<Maybe<Episode>>;\n  /** The gender of the character ('Female', 'Male', 'Genderless' or 'unknown'). */\n  gender?: Maybe<Scalars['String']>;\n  /** The id of the character. */\n  id?: Maybe<Scalars['ID']>;\n  /**\n   * Link to the character's image.\n   * All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.\n   */\n  image?: Maybe<Scalars['String']>;\n  /** The character's last known location */\n  location?: Maybe<Location>;\n  /** The name of the character. */\n  name?: Maybe<Scalars['String']>;\n  /** The character's origin location */\n  origin?: Maybe<Location>;\n  /** The species of the character. */\n  species?: Maybe<Scalars['String']>;\n  /** The status of the character ('Alive', 'Dead' or 'unknown'). */\n  status?: Maybe<Scalars['String']>;\n  /** The type or subspecies of the character. */\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type Characters = {\n  __typename?: 'Characters';\n  info?: Maybe<Info>;\n  results?: Maybe<Array<Maybe<Character>>>;\n};\n\nexport type Episode = {\n  __typename?: 'Episode';\n  /** The air date of the episode. */\n  air_date?: Maybe<Scalars['String']>;\n  /** List of characters who have been seen in the episode. */\n  characters: Array<Maybe<Character>>;\n  /** Time at which the episode was created in the database. */\n  created?: Maybe<Scalars['String']>;\n  /** The code of the episode. */\n  episode?: Maybe<Scalars['String']>;\n  /** The id of the episode. */\n  id?: Maybe<Scalars['ID']>;\n  /** The name of the episode. */\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type Episodes = {\n  __typename?: 'Episodes';\n  info?: Maybe<Info>;\n  results?: Maybe<Array<Maybe<Episode>>>;\n};\n\nexport type FilterCharacter = {\n  gender?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  species?: InputMaybe<Scalars['String']>;\n  status?: InputMaybe<Scalars['String']>;\n  type?: InputMaybe<Scalars['String']>;\n};\n\nexport type FilterEpisode = {\n  episode?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type FilterLocation = {\n  dimension?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  type?: InputMaybe<Scalars['String']>;\n};\n\nexport type Info = {\n  __typename?: 'Info';\n  /** The length of the response. */\n  count?: Maybe<Scalars['Int']>;\n  /** Number of the next page (if it exists) */\n  next?: Maybe<Scalars['Int']>;\n  /** The amount of pages. */\n  pages?: Maybe<Scalars['Int']>;\n  /** Number of the previous page (if it exists) */\n  prev?: Maybe<Scalars['Int']>;\n};\n\nexport type Location = {\n  __typename?: 'Location';\n  /** Time at which the location was created in the database. */\n  created?: Maybe<Scalars['String']>;\n  /** The dimension in which the location is located. */\n  dimension?: Maybe<Scalars['String']>;\n  /** The id of the location. */\n  id?: Maybe<Scalars['ID']>;\n  /** The name of the location. */\n  name?: Maybe<Scalars['String']>;\n  /** List of characters who have been last seen in the location. */\n  residents: Array<Maybe<Character>>;\n  /** The type of the location. */\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type Locations = {\n  __typename?: 'Locations';\n  info?: Maybe<Info>;\n  results?: Maybe<Array<Maybe<Location>>>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Get a specific character by ID */\n  character?: Maybe<Character>;\n  /** Get the list of all characters */\n  characters?: Maybe<Characters>;\n  /** Get a list of characters selected by ids */\n  charactersByIds?: Maybe<Array<Maybe<Character>>>;\n  /** Get a specific episode by ID */\n  episode?: Maybe<Episode>;\n  /** Get the list of all episodes */\n  episodes?: Maybe<Episodes>;\n  /** Get a list of episodes selected by ids */\n  episodesByIds?: Maybe<Array<Maybe<Episode>>>;\n  /** Get a specific locations by ID */\n  location?: Maybe<Location>;\n  /** Get the list of all locations */\n  locations?: Maybe<Locations>;\n  /** Get a list of locations selected by ids */\n  locationsByIds?: Maybe<Array<Maybe<Location>>>;\n};\n\n\nexport type QueryCharacterArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCharactersArgs = {\n  filter?: InputMaybe<FilterCharacter>;\n  page?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryCharactersByIdsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryEpisodeArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEpisodesArgs = {\n  filter?: InputMaybe<FilterEpisode>;\n  page?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryEpisodesByIdsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryLocationArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryLocationsArgs = {\n  filter?: InputMaybe<FilterLocation>;\n  page?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryLocationsByIdsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\nexport type GetCharactersQueryVariables = Exact<{\n  search?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type GetCharactersQuery = { __typename?: 'Query', characters?: { __typename?: 'Characters', results?: Array<{ __typename?: 'Character', id?: string | null | undefined, name?: string | null | undefined, type?: string | null | undefined, image?: string | null | undefined, status?: string | null | undefined, gender?: string | null | undefined, species?: string | null | undefined, origin?: { __typename?: 'Location', name?: string | null | undefined, dimension?: string | null | undefined } | null | undefined, episode: Array<{ __typename?: 'Episode', id?: string | null | undefined, name?: string | null | undefined } | null | undefined> } | null | undefined> | null | undefined } | null | undefined };\n\n\nexport const GetCharactersDocument = gql`\n    query GetCharacters($search: String) {\n  characters(filter: {name: $search}) {\n    results {\n      id\n      name\n      type\n      origin {\n        name\n        dimension\n      }\n      image\n      status\n      gender\n      episode {\n        id\n        name\n      }\n      species\n    }\n  }\n}\n    `;\n\n/**\n * __useGetCharactersQuery__\n *\n * To run a query within a React component, call `useGetCharactersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCharactersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCharactersQuery({\n *   variables: {\n *      search: // value for 'search'\n *   },\n * });\n */\nexport function useGetCharactersQuery(baseOptions?: Apollo.QueryHookOptions<GetCharactersQuery, GetCharactersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCharactersQuery, GetCharactersQueryVariables>(GetCharactersDocument, options);\n      }\nexport function useGetCharactersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCharactersQuery, GetCharactersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCharactersQuery, GetCharactersQueryVariables>(GetCharactersDocument, options);\n        }\nexport type GetCharactersQueryHookResult = ReturnType<typeof useGetCharactersQuery>;\nexport type GetCharactersLazyQueryHookResult = ReturnType<typeof useGetCharactersLazyQuery>;\nexport type GetCharactersQueryResult = Apollo.QueryResult<GetCharactersQuery, GetCharactersQueryVariables>;","import {\n  SimpleGrid,\n  Input,\n  Box,\n  Flex,\n  Container,\n  Spinner,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  ListItem,\n  PopoverBody,\n  PopoverHeader,\n  List,\n  PopoverArrow,\n  InputGroup,\n  InputLeftElement,\n} from \"@chakra-ui/react\";\nimport { SearchIcon } from \"@chakra-ui/icons\";\n\nimport { useRef, useState } from \"react\";\nimport { useGetCharactersQuery } from \"./graphql\";\n\nfunction App() {\n  let [search, setSearch] = useState(\"\");\n\n  let searchRef = useRef<HTMLInputElement>(null);\n\n  let { data, loading } = useGetCharactersQuery({\n    variables: {\n      search,\n    },\n  });\n\n  return (\n    <Container maxW=\"container.xl\" marginY=\"4\">\n      <Box marginBottom={4}>\n        <form\n          onSubmit={(event) => {\n            setSearch(searchRef?.current?.value || \"\");\n            event.preventDefault();\n          }}\n        >\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<SearchIcon color=\"gray.300\" />}\n            />\n            <Input ref={searchRef} placeholder=\"Search...\" />\n          </InputGroup>\n        </form>\n      </Box>\n\n      {loading ? (\n        <Spinner />\n      ) : (\n        <SimpleGrid minChildWidth=\"12rem\" spacing={4}>\n          {data?.characters?.results?.map((character) => (\n            <Flex align=\"center\" flexDirection=\"column\">\n              <Popover trigger=\"hover\">\n                <PopoverTrigger>\n                  {character?.image && (\n                    <img\n                      src={character?.image}\n                      alt={character.name || \"A Rick & Morty's character\"}\n                    />\n                  )}\n                </PopoverTrigger>\n                <PopoverContent>\n                  <PopoverArrow />\n                  <PopoverHeader>\n                    <strong>{character?.name}</strong>,{\" \"}\n                    {character?.episode.length} episodes\n                  </PopoverHeader>\n                  <PopoverBody>\n                    <List>\n                      <ListItem>\n                        {character?.species} ({character?.gender})\n                      </ListItem>\n                      <ListItem>\n                        {character?.origin?.name} (\n                        {character?.origin?.dimension})\n                      </ListItem>\n                      {character?.type && (\n                        <ListItem>{character?.type}</ListItem>\n                      )}\n                    </List>\n                  </PopoverBody>\n                </PopoverContent>\n              </Popover>\n              <Box marginTop={2}>\n                <strong>{character?.name}</strong>\n              </Box>\n            </Flex>\n          ))}\n        </SimpleGrid>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://rickandmortyapi.com/graphql\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}